"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var http_1 = require("@angular/common/http");
var BtcService = /** @class */ (function () {
    function BtcService(http) {
        this.http = http;
        this.totalAmount$ = new rxjs_1.BehaviorSubject(0);
        this.addresses$ = new rxjs_1.BehaviorSubject([]);
        this.URL = "https://blockchain.info/q/addressbalance/";
    }
    BtcService.prototype.getTotalAmount = function () {
        return this.totalAmount$.asObservable();
    };
    BtcService.prototype.getAddresses = function () {
        return this.addresses$.asObservable();
    };
    BtcService.prototype.addAddress = function (a) {
        this.addresses$.getValue().push(a);
        this.updateBalance(a);
        this.save();
    };
    BtcService.prototype.removeAddress = function (a) {
        this.addresses$.next(this.addresses$.getValue().filter(function (item) { return item.address !== a.address; }));
        this.recalculateTotal();
        this.save();
    };
    BtcService.prototype.updateBalance = function (a) {
        var _this = this;
        this.http.get(this.URL + a.address, { responseType: 'text' })
            .subscribe(function (resp) {
            a.balance = parseInt(resp) / 100000000; //1 BTC = 100 000 000 Satoshi
            _this.recalculateTotal();
        });
    };
    BtcService.prototype.recalculateTotal = function () {
        this.totalAmount$.next(this.addresses$.getValue()
            .map(function (item) { return item.balance; })
            .reduce(function (a, b) { return a + b; }, 0));
    };
    BtcService.prototype.save = function () {
        localStorage.setItem('btc', this.addresses$.getValue().map(function (item) { return item.address; }).toString());
    };
    BtcService.prototype.refresh = function () {
        var _this = this;
        this.totalAmount$.next(0);
        var temp = this.addresses$.getValue().slice();
        this.addresses$.next([]);
        temp.forEach(function (item) {
            _this.addAddress(item);
        });
        this.addresses$.next(temp);
        this.recalculateTotal();
    };
    BtcService.prototype.load = function () {
        var _this = this;
        var a = localStorage.getItem('btc');
        if (a && a.length > 0) {
            var array = a.split(",");
            array.forEach(function (item) {
                _this.addAddress({
                    balance: 0,
                    address: item
                });
            });
        }
    };
    BtcService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], BtcService);
    return BtcService;
}());
exports.BtcService = BtcService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRjLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidGMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw2QkFBbUQ7QUFDbkQsNkNBQWtEO0FBUWxEO0lBTUksb0JBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFKNUIsaUJBQVksR0FBRyxJQUFJLHNCQUFlLENBQVMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsZUFBVSxHQUFHLElBQUksc0JBQWUsQ0FBZSxFQUFFLENBQUMsQ0FBQztRQUMzQyxRQUFHLEdBQUcsMkNBQTJDLENBQUM7SUFFNUIsQ0FBQztJQUV2QyxtQ0FBYyxHQUFkO1FBQ0ksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxpQ0FBWSxHQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCwrQkFBVSxHQUFWLFVBQVcsQ0FBYTtRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQixDQUFDO0lBRUQsa0NBQWEsR0FBYixVQUFjLENBQWE7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBZ0IsSUFBSyxPQUFBLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBMUIsQ0FBMEIsQ0FBQyxDQUN0RixDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxrQ0FBYSxHQUFiLFVBQWMsQ0FBYTtRQUEzQixpQkFNQztRQUxHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQzthQUN4RCxTQUFTLENBQUMsVUFBQyxJQUFZO1lBQ3BCLENBQUMsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLDZCQUE2QjtZQUNyRSxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxxQ0FBZ0IsR0FBaEI7UUFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7YUFDckIsR0FBRyxDQUFDLFVBQUMsSUFBZ0IsSUFBSyxPQUFBLElBQUksQ0FBQyxPQUFPLEVBQVosQ0FBWSxDQUFDO2FBQ3ZDLE1BQU0sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLEdBQUcsQ0FBQyxFQUFMLENBQUssRUFBRSxDQUFDLENBQUMsQ0FDbEMsQ0FBQztJQUNOLENBQUM7SUFFRCx5QkFBSSxHQUFKO1FBQ0ksWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsT0FBTyxFQUFaLENBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELDRCQUFPLEdBQVA7UUFBQSxpQkFTQztRQVJHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQWdCO1lBQzFCLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQseUJBQUksR0FBSjtRQUFBLGlCQVdDO1FBVkcsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFZO2dCQUN2QixLQUFJLENBQUMsVUFBVSxDQUFDO29CQUNaLE9BQU8sRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxJQUFJO2lCQUNoQixDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQXpFUSxVQUFVO1FBRHRCLGlCQUFVLEVBQUU7eUNBT2lCLGlCQUFVO09BTjNCLFVBQVUsQ0EyRXRCO0lBQUQsaUJBQUM7Q0FBQSxBQTNFRCxJQTJFQztBQTNFWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ0Y0FkZHJlc3Mge1xyXG4gICAgYmFsYW5jZTogbnVtYmVyO1xyXG4gICAgYWRkcmVzczogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCdGNTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIHRvdGFsQW1vdW50JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPigwKTtcclxuICAgIHByaXZhdGUgYWRkcmVzc2VzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QnRjQWRkcmVzc1tdPihbXSk7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgVVJMID0gXCJodHRwczovL2Jsb2NrY2hhaW4uaW5mby9xL2FkZHJlc3NiYWxhbmNlL1wiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCl7fVxyXG5cclxuICAgIGdldFRvdGFsQW1vdW50KCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWxBbW91bnQkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFkZHJlc3NlcygpOiBPYnNlcnZhYmxlPEJ0Y0FkZHJlc3NbXT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZHJlc3NlcyQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQWRkcmVzcyhhOiBCdGNBZGRyZXNzKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRyZXNzZXMkLmdldFZhbHVlKCkucHVzaChhKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUJhbGFuY2UoYSk7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUFkZHJlc3MoYTogQnRjQWRkcmVzcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWRkcmVzc2VzJC5uZXh0KFxyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3NlcyQuZ2V0VmFsdWUoKS5maWx0ZXIoKGl0ZW06IEJ0Y0FkZHJlc3MpID0+IGl0ZW0uYWRkcmVzcyAhPT0gYS5hZGRyZXNzKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQmFsYW5jZShhOiBCdGNBZGRyZXNzKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5odHRwLmdldCh0aGlzLlVSTCArIGEuYWRkcmVzcywgeyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChyZXNwOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGEuYmFsYW5jZSA9IHBhcnNlSW50KHJlc3ApIC8gMTAwMDAwMDAwOyAvLzEgQlRDID0gMTAwIDAwMCAwMDAgU2F0b3NoaVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZWNhbGN1bGF0ZVRvdGFsKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudG90YWxBbW91bnQkLm5leHQoXHJcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzc2VzJC5nZXRWYWx1ZSgpXHJcbiAgICAgICAgICAgICAgICAubWFwKChpdGVtOiBCdGNBZGRyZXNzKSA9PiBpdGVtLmJhbGFuY2UpXHJcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmUoKTogdm9pZCB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2J0YycsIHRoaXMuYWRkcmVzc2VzJC5nZXRWYWx1ZSgpLm1hcChpdGVtID0+IGl0ZW0uYWRkcmVzcykudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVmcmVzaCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRvdGFsQW1vdW50JC5uZXh0KDApO1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLmFkZHJlc3NlcyQuZ2V0VmFsdWUoKS5zbGljZSgpO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzc2VzJC5uZXh0KFtdKTtcclxuICAgICAgICB0ZW1wLmZvckVhY2goKGl0ZW06IEJ0Y0FkZHJlc3MpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZGRBZGRyZXNzKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzc2VzJC5uZXh0KHRlbXApO1xyXG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVUb3RhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYnRjJyk7XHJcbiAgICAgICAgaWYgKGEgJiYgYS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBhcnJheSA9IGEuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKChpdGVtOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQWRkcmVzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBpdGVtXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSJdfQ==