"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var http_1 = require("@angular/common/http");
var BtcService = /** @class */ (function () {
    function BtcService(http) {
        this.http = http;
        this.totalAmount$ = new rxjs_1.BehaviorSubject(0);
        this.addresses$ = new rxjs_1.BehaviorSubject([]);
    }
    BtcService.prototype.getTotalAmount = function () {
        return this.totalAmount$.asObservable();
    };
    BtcService.prototype.getAddresses = function () {
        return this.addresses$.asObservable();
    };
    BtcService.prototype.addAddress = function (a) {
        this.addresses$.getValue().push(a);
        this.updateBalance(a);
        this.save();
    };
    BtcService.prototype.removeAddress = function (a) {
        this.addresses$.next(this.addresses$.getValue().filter(function (item) { return item.address !== a.address; }));
        this.recalculateTotal();
        this.save();
    };
    BtcService.prototype.updateBalance = function (a) {
        var _this = this;
        this.http.get('https://blockchain.info/q/addressbalance/' + a.address, { responseType: 'text' })
            .subscribe(function (resp) {
            a.balance = parseInt(resp) / 100000000; //1 BTC = 100 000 000 Satoshi
            _this.recalculateTotal();
        });
    };
    BtcService.prototype.recalculateTotal = function () {
        this.totalAmount$.next(this.addresses$.getValue()
            .map(function (item) { return item.balance; })
            .reduce(function (a, b) { return a + b; }, 0));
    };
    BtcService.prototype.save = function () {
        localStorage.setItem('btc', this.addresses$.getValue().map(function (item) { return item.address; }).toString());
    };
    BtcService.prototype.refresh = function () {
        var _this = this;
        var temp = this.addresses$.getValue().slice();
        this.addresses$.next([]);
        temp.forEach(function (item) {
            _this.addAddress(item);
        });
        this.addresses$.next(temp);
        this.recalculateTotal();
    };
    BtcService.prototype.load = function () {
        var _this = this;
        var a = localStorage.getItem('btc');
        if (a && a.length > 0) {
            var array = a.split(",");
            array.forEach(function (item) {
                _this.addAddress({
                    balance: 0,
                    address: item
                });
            });
        }
    };
    BtcService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], BtcService);
    return BtcService;
}());
exports.BtcService = BtcService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRjLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidGMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw2QkFBbUQ7QUFDbkQsNkNBQWtEO0FBUWxEO0lBS0ksb0JBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFINUIsaUJBQVksR0FBRyxJQUFJLHNCQUFlLENBQVMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsZUFBVSxHQUFHLElBQUksc0JBQWUsQ0FBZSxFQUFFLENBQUMsQ0FBQztJQUVyQixDQUFDO0lBRXZDLG1DQUFjLEdBQWQ7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsaUNBQVksR0FBWjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCwrQkFBVSxHQUFWLFVBQVcsQ0FBYTtRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQixDQUFDO0lBRUQsa0NBQWEsR0FBYixVQUFjLENBQWE7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBZ0IsSUFBSyxPQUFBLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBMUIsQ0FBMEIsQ0FBQyxDQUN0RixDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxrQ0FBYSxHQUFiLFVBQWMsQ0FBYTtRQUEzQixpQkFNQztRQUxHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDM0YsU0FBUyxDQUFDLFVBQUMsSUFBWTtZQUNwQixDQUFDLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyw2QkFBNkI7WUFDckUsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQscUNBQWdCLEdBQWhCO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO2FBQ3JCLEdBQUcsQ0FBQyxVQUFDLElBQWdCLElBQUssT0FBQSxJQUFJLENBQUMsT0FBTyxFQUFaLENBQVksQ0FBQzthQUN2QyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxHQUFHLENBQUMsRUFBTCxDQUFLLEVBQUUsQ0FBQyxDQUFDLENBQ2xDLENBQUM7SUFDTixDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNJLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLE9BQU8sRUFBWixDQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRCw0QkFBTyxHQUFQO1FBQUEsaUJBUUM7UUFQRyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFnQjtZQUMxQixLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELHlCQUFJLEdBQUo7UUFBQSxpQkFXQztRQVZHLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFZO2dCQUN2QixLQUFJLENBQUMsVUFBVSxDQUFDO29CQUNaLE9BQU8sRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxJQUFJO2lCQUNoQixDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDTCxDQUFDO0lBdkVRLFVBQVU7UUFEdEIsaUJBQVUsRUFBRTt5Q0FNaUIsaUJBQVU7T0FMM0IsVUFBVSxDQXlFdEI7SUFBRCxpQkFBQztDQUFBLEFBekVELElBeUVDO0FBekVZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnRjQWRkcmVzcyB7XHJcbiAgICBiYWxhbmNlOiBudW1iZXI7XHJcbiAgICBhZGRyZXNzOiBzdHJpbmc7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJ0Y1NlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgdG90YWxBbW91bnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KDApO1xyXG4gICAgcHJpdmF0ZSBhZGRyZXNzZXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxCdGNBZGRyZXNzW10+KFtdKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpe31cclxuXHJcbiAgICBnZXRUb3RhbEFtb3VudCgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsQW1vdW50JC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBZGRyZXNzZXMoKTogT2JzZXJ2YWJsZTxCdGNBZGRyZXNzW10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRyZXNzZXMkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEFkZHJlc3MoYTogQnRjQWRkcmVzcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWRkcmVzc2VzJC5nZXRWYWx1ZSgpLnB1c2goYSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKGEpO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBZGRyZXNzKGE6IEJ0Y0FkZHJlc3MpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyQubmV4dChcclxuICAgICAgICAgICAgdGhpcy5hZGRyZXNzZXMkLmdldFZhbHVlKCkuZmlsdGVyKChpdGVtOiBCdGNBZGRyZXNzKSA9PiBpdGVtLmFkZHJlc3MgIT09IGEuYWRkcmVzcylcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVUb3RhbCgpO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUJhbGFuY2UoYTogQnRjQWRkcmVzcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaHR0cC5nZXQoJ2h0dHBzOi8vYmxvY2tjaGFpbi5pbmZvL3EvYWRkcmVzc2JhbGFuY2UvJyArIGEuYWRkcmVzcywgeyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChyZXNwOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGEuYmFsYW5jZSA9IHBhcnNlSW50KHJlc3ApIC8gMTAwMDAwMDAwOyAvLzEgQlRDID0gMTAwIDAwMCAwMDAgU2F0b3NoaVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZWNhbGN1bGF0ZVRvdGFsKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudG90YWxBbW91bnQkLm5leHQoXHJcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzc2VzJC5nZXRWYWx1ZSgpXHJcbiAgICAgICAgICAgICAgICAubWFwKChpdGVtOiBCdGNBZGRyZXNzKSA9PiBpdGVtLmJhbGFuY2UpXHJcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmUoKTogdm9pZCB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2J0YycsIHRoaXMuYWRkcmVzc2VzJC5nZXRWYWx1ZSgpLm1hcChpdGVtID0+IGl0ZW0uYWRkcmVzcykudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVmcmVzaCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5hZGRyZXNzZXMkLmdldFZhbHVlKCkuc2xpY2UoKTtcclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyQubmV4dChbXSk7XHJcbiAgICAgICAgdGVtcC5mb3JFYWNoKChpdGVtOiBCdGNBZGRyZXNzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQWRkcmVzcyhpdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyQubmV4dCh0ZW1wKTtcclxuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlVG90YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J0YycpO1xyXG4gICAgICAgIGlmIChhICYmIGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXkgPSBhLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaCgoaXRlbTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEFkZHJlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogaXRlbVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=