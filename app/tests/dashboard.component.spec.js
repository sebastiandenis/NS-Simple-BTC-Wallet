"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("nativescript-angular/zone-js/testing.jasmine");
var testing_1 = require("nativescript-angular/testing");
var testing_2 = require("@angular/core/testing");
var btc_service_1 = require("~/services/btc.service");
var dashboard_component_1 = require("~/home/dashboard.component");
var utils_1 = require("./utils");
describe("DashboardComponent", function () {
    beforeEach(testing_1.nsTestBedBeforeEach([dashboard_component_1.DashboardComponent], [{ provide: btc_service_1.BtcService, useValue: new utils_1.FakeBtcService() }]));
    afterEach(testing_1.nsTestBedAfterEach(false));
    it("Component should exist", testing_2.async(function () {
        return testing_1.nsTestBedRender(dashboard_component_1.DashboardComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef).toBeDefined();
        });
    }));
    it("properties should be defined at component start", testing_2.async(function () {
        return testing_1.nsTestBedRender(dashboard_component_1.DashboardComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef.instance.totalAmount$).toBeDefined();
        });
    }));
    it("BtcService.recalculateTotal and getTotalAmount function should be called when ngOnInit() is called", function () {
        return testing_1.nsTestBedRender(dashboard_component_1.DashboardComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "recalculateTotal");
            spyOn(service, "getTotalAmount");
            componentRef.instance.ngOnInit();
            expect(service.recalculateTotal).toHaveBeenCalled();
            expect(service.getTotalAmount).toHaveBeenCalled();
        });
    });
    it("BtcService.refresh() should be called when onRefresh() was called", function () {
        return testing_1.nsTestBedRender(dashboard_component_1.DashboardComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "refresh");
            componentRef.instance.onRefresh();
            expect(service.refresh).toHaveBeenCalled();
        });
    });
    it("it should return proper value when getGaugeMax is called", function () {
        return testing_1.nsTestBedRender(dashboard_component_1.DashboardComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var gMax = componentRef.instance.getGaugeMax(-100);
            expect(gMax).toEqual(1);
            gMax = componentRef.instance.getGaugeMax(-2.6);
            expect(gMax).toEqual(1);
            gMax = componentRef.instance.getGaugeMax(0);
            expect(gMax).toEqual(1);
            gMax = componentRef.instance.getGaugeMax(0.9);
            expect(gMax).toEqual(1);
            gMax = componentRef.instance.getGaugeMax(1);
            expect(gMax).toEqual(10);
            gMax = componentRef.instance.getGaugeMax(1.1);
            expect(gMax).toEqual(10);
            gMax = componentRef.instance.getGaugeMax(10);
            expect(gMax).toEqual(100);
            gMax = componentRef.instance.getGaugeMax(10.3);
            expect(gMax).toEqual(100);
            gMax = componentRef.instance.getGaugeMax(100);
            expect(gMax).toEqual(1000);
            gMax = componentRef.instance.getGaugeMax(100.09);
            expect(gMax).toEqual(1000);
            gMax = componentRef.instance.getGaugeMax(1000);
            expect(gMax).toEqual(100000);
            gMax = componentRef.instance.getGaugeMax(1000000000);
            expect(gMax).toEqual(100000);
            gMax = componentRef.instance.getGaugeMax(null);
            expect(gMax).toEqual(1);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,