"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("nativescript-angular/zone-js/testing.jasmine");
var testing_1 = require("nativescript-angular/testing");
var testing_2 = require("@angular/core/testing");
var about_component_1 = require("~/home/about.component");
// nsTestBedInit();
describe("AboutComponent", function () {
    beforeEach(testing_1.nsTestBedBeforeEach([about_component_1.AboutComponent]));
    afterEach(testing_1.nsTestBedAfterEach(false));
    it("Component should exist", testing_2.async(function () {
        return testing_1.nsTestBedRender(about_component_1.AboutComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef).toBeDefined();
        });
    }));
    it("animationTrigger should be false at component start", testing_2.async(function () {
        return testing_1.nsTestBedRender(about_component_1.AboutComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var animationTrigger = componentRef.instance.animationTrigger;
            expect(animationTrigger).toBeFalsy();
        });
    }));
    it("animationTrigger should change when onButtonTap was called", testing_2.async(function () {
        return testing_1.nsTestBedRender(about_component_1.AboutComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.onButtonTap();
            expect(componentRef.instance.animationTrigger).toBeTruthy();
            componentRef.instance.onButtonTap();
            expect(componentRef.instance.animationTrigger).toBeFalsy();
        });
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuY29tcG9uZW50LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhYm91dC5jb21wb25lbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdEQUFzRDtBQUN0RCx3REFJc0M7QUFFdEMsaURBQThDO0FBRTlDLDBEQUF3RDtBQUV4RCxtQkFBbUI7QUFFbkIsUUFBUSxDQUFDLGdCQUFnQixFQUFFO0lBQ3pCLFVBQVUsQ0FBQyw2QkFBbUIsQ0FBQyxDQUFDLGdDQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEQsU0FBUyxDQUFDLDRCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFckMsRUFBRSxDQUFDLHdCQUF3QixFQUFFLGVBQUssQ0FBQztRQUNqQyxPQUFPLHlCQUFlLENBQUMsZ0NBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDakQsSUFBTSxZQUFZLEdBQWlDLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDeEUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVKLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxlQUFLLENBQUM7UUFDOUQsT0FBTyx5QkFBZSxDQUFDLGdDQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ2pELElBQU0sWUFBWSxHQUFpQyxPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ3hFLElBQUksZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM5RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFSixFQUFFLENBQUMsNERBQTRELEVBQUUsZUFBSyxDQUFDO1FBQ3JFLE9BQU8seUJBQWUsQ0FBQyxnQ0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUNqRCxJQUFNLFlBQVksR0FBaUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUN4RSxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDNUQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvem9uZS1qcy90ZXN0aW5nLmphc21pbmVcIjtcclxuaW1wb3J0IHtcclxuICBuc1Rlc3RCZWRCZWZvcmVFYWNoLFxyXG4gIG5zVGVzdEJlZEFmdGVyRWFjaCxcclxuICBuc1Rlc3RCZWRSZW5kZXJcclxufSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvdGVzdGluZ1wiO1xyXG5cclxuaW1wb3J0IHsgYXN5bmMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZS90ZXN0aW5nXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFib3V0Q29tcG9uZW50IH0gZnJvbSBcIn4vaG9tZS9hYm91dC5jb21wb25lbnRcIjtcclxuXHJcbi8vIG5zVGVzdEJlZEluaXQoKTtcclxuXHJcbmRlc2NyaWJlKFwiQWJvdXRDb21wb25lbnRcIiwgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2gobnNUZXN0QmVkQmVmb3JlRWFjaChbQWJvdXRDb21wb25lbnRdKSk7XHJcblxyXG4gIGFmdGVyRWFjaChuc1Rlc3RCZWRBZnRlckVhY2goZmFsc2UpKTtcclxuXHJcbiAgaXQoXCJDb21wb25lbnQgc2hvdWxkIGV4aXN0XCIsIGFzeW5jKCgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWJvdXRDb21wb25lbnQpLnRoZW4oZml4dHVyZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEFib3V0Q29tcG9uZW50PiA9IGZpeHR1cmUuY29tcG9uZW50UmVmO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgfSkpO1xyXG5cclxuICBpdChcImFuaW1hdGlvblRyaWdnZXIgc2hvdWxkIGJlIGZhbHNlIGF0IGNvbXBvbmVudCBzdGFydFwiLCBhc3luYygoKSA9PiB7XHJcbiAgICByZXR1cm4gbnNUZXN0QmVkUmVuZGVyKEFib3V0Q29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBYm91dENvbXBvbmVudD4gPSBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgbGV0IGFuaW1hdGlvblRyaWdnZXIgPSBjb21wb25lbnRSZWYuaW5zdGFuY2UuYW5pbWF0aW9uVHJpZ2dlcjtcclxuICAgICAgZXhwZWN0KGFuaW1hdGlvblRyaWdnZXIpLnRvQmVGYWxzeSgpO1xyXG4gICAgfSk7XHJcbiAgfSkpO1xyXG5cclxuICBpdChcImFuaW1hdGlvblRyaWdnZXIgc2hvdWxkIGNoYW5nZSB3aGVuIG9uQnV0dG9uVGFwIHdhcyBjYWxsZWRcIiwgYXN5bmMoKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5zVGVzdEJlZFJlbmRlcihBYm91dENvbXBvbmVudCkudGhlbihmaXh0dXJlID0+IHtcclxuICAgICAgY29uc3QgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8QWJvdXRDb21wb25lbnQ+ID0gZml4dHVyZS5jb21wb25lbnRSZWY7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5vbkJ1dHRvblRhcCgpO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmLmluc3RhbmNlLmFuaW1hdGlvblRyaWdnZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9uQnV0dG9uVGFwKCk7XHJcbiAgICAgIGV4cGVjdChjb21wb25lbnRSZWYuaW5zdGFuY2UuYW5pbWF0aW9uVHJpZ2dlcikudG9CZUZhbHN5KCk7XHJcbiAgICB9KTtcclxuICB9KSk7XHJcbn0pO1xyXG4iXX0=