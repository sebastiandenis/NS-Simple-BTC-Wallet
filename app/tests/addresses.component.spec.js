"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("nativescript-angular/zone-js/testing.jasmine");
var testing_1 = require("nativescript-angular/testing");
var testing_2 = require("@angular/core/testing");
var btc_service_1 = require("~/services/btc.service");
var addresses_component_1 = require("~/home/addresses.component");
var rxjs_1 = require("rxjs");
testing_1.nsTestBedInit();
var FakeBtcService = /** @class */ (function () {
    function FakeBtcService() {
    }
    FakeBtcService.prototype.addAddress = function (a) { };
    FakeBtcService.prototype.getTotalAmount = function () {
        return rxjs_1.of();
    };
    FakeBtcService.prototype.getAddresses = function () {
        return rxjs_1.of();
    };
    FakeBtcService.prototype.removeAddress = function () { };
    return FakeBtcService;
}());
exports.FakeBtcService = FakeBtcService;
describe("AddressesComponent", function () {
    beforeEach(testing_1.nsTestBedBeforeEach([addresses_component_1.AddressesComponent], [{ provide: btc_service_1.BtcService, useValue: new FakeBtcService() }]));
    afterEach(testing_1.nsTestBedAfterEach(false));
    it("Component should exist", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef).toBeDefined();
        });
    }));
    it("properties should be defined at component start", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef.instance.addresses$).toBeDefined();
            expect(componentRef.instance.totalAmount$).toBeDefined();
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("BtcService.getAddress and getTotalAmount function should be called when ngOnInit() is called", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "getAddresses");
            spyOn(service, "getTotalAmount");
            componentRef.instance.ngOnInit();
            expect(service.getAddresses).toHaveBeenCalled();
            expect(service.getTotalAmount).toHaveBeenCalled();
        });
    });
    it("property newAddress should be empty after onAdd() call", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress = "test";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
            componentRef.instance.newAddress = "";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("BtcService.addAddress() function should be called when onAdd() and newAddress is not empty", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "addAddress");
            componentRef.instance.newAddress = "test";
            componentRef.instance.onAdd();
            expect(service.addAddress).toHaveBeenCalled();
            componentRef.instance.newAddress = "";
            componentRef.instance.onAdd();
            expect(service.addAddress).toHaveBeenCalledTimes(1);
        });
    });
    it("BtcService.removeAddress() should be called when onDel() was called", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "removeAddress");
            componentRef.instance.onDel(null);
            expect(service.removeAddress).toHaveBeenCalled();
        });
    });
    it("getShortAddress should return short address", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress =
                "12345678901234567890123456789012345678901234567890";
            var shortAddress = componentRef.instance.getShortAddress("1234567890-10-1234567890-20-1234567890-30-1234567890-40-1234567890-50");
            expect(shortAddress).toContain("...");
            shortAddress = componentRef.instance.getShortAddress("");
            expect(shortAddress).toContain("...");
        });
    }));
});
//# sourceMappingURL=data:application/json;base64,