"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("nativescript-angular/zone-js/testing.jasmine");
var testing_1 = require("nativescript-angular/testing");
var testing_2 = require("@angular/core/testing");
var btc_service_1 = require("~/services/btc.service");
var addresses_component_1 = require("~/home/addresses.component");
var utils_1 = require("./utils");
testing_1.nsTestBedInit();
describe("AddressesComponent", function () {
    beforeEach(testing_1.nsTestBedBeforeEach([addresses_component_1.AddressesComponent], [{ provide: btc_service_1.BtcService, useValue: new utils_1.FakeBtcService() }]));
    afterEach(testing_1.nsTestBedAfterEach(false));
    it("Component should exist", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef).toBeDefined();
        });
    }));
    it("properties should be defined at component start", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef.instance.addresses$).toBeDefined();
            expect(componentRef.instance.totalAmount$).toBeDefined();
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("BtcService.getAddress and getTotalAmount function should be called when ngOnInit() is called", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "getAddresses");
            spyOn(service, "getTotalAmount");
            componentRef.instance.ngOnInit();
            expect(service.getAddresses).toHaveBeenCalled();
            expect(service.getTotalAmount).toHaveBeenCalled();
        });
    });
    it("property newAddress should be empty after onAdd() call", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress = "test";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
            componentRef.instance.newAddress = "";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("BtcService.addAddress() function should be called when onAdd() and newAddress is not empty", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "addAddress");
            componentRef.instance.newAddress = "test";
            componentRef.instance.onAdd();
            expect(service.addAddress).toHaveBeenCalled();
            componentRef.instance.newAddress = "";
            componentRef.instance.onAdd();
            expect(service.addAddress).toHaveBeenCalledTimes(1);
        });
    });
    it("BtcService.removeAddress() should be called when onDel() was called", function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            var service = componentRef.instance.btc;
            spyOn(service, "removeAddress");
            componentRef.instance.onDel(null);
            expect(service.removeAddress).toHaveBeenCalled();
        });
    });
    it("getShortAddress should return short address", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress =
                "12345678901234567890123456789012345678901234567890";
            var shortAddress = componentRef.instance.getShortAddress("1234567890-10-1234567890-20-1234567890-30-1234567890-40-1234567890-50");
            expect(shortAddress).toContain("...");
            shortAddress = componentRef.instance.getShortAddress("");
            expect(shortAddress).toContain("...");
        });
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2VzLmNvbXBvbmVudC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkcmVzc2VzLmNvbXBvbmVudC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0RBQXNEO0FBQ3RELHdEQUtzQztBQUV0QyxpREFBOEM7QUFFOUMsc0RBQW9EO0FBQ3BELGtFQUFnRTtBQUNoRSxpQ0FBeUM7QUFFekMsdUJBQWEsRUFBRSxDQUFDO0FBRWhCLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtJQUM3QixVQUFVLENBQ1IsNkJBQW1CLENBQ2pCLENBQUMsd0NBQWtCLENBQUMsRUFDcEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSx3QkFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLHNCQUFjLEVBQUUsRUFBRSxDQUFDLENBQzFELENBQ0YsQ0FBQztJQUVGLFNBQVMsQ0FBQyw0QkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXJDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxlQUFLLENBQUM7UUFDakMsT0FBTyx5QkFBZSxDQUFDLHdDQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUNyRCxJQUFNLFlBQVksR0FDaEIsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUN2QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRUosRUFBRSxDQUFDLGlEQUFpRCxFQUFFLGVBQUssQ0FBQztRQUMxRCxPQUFPLHlCQUFlLENBQUMsd0NBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ3JELElBQU0sWUFBWSxHQUNoQixPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxZQUFZLENB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QUNoQixPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ3ZCLElBQU0sT0FBTyxHQUFlLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3RELEtBQUssQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDaEMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsZUFBSyxDQUFDO1FBQ3RELE9BQU8seUJBQWUsQ0FBQyx3Q0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDckQsSUFBTSxZQUFZLEdBQ2hCLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDdkIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVO2dCQUM5QixvREFBb0QsQ0FBQztZQUN2RCxJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FDdEQsdUVBQXVFLENBQ3hFLENBQUM7WUFDRixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXRDLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvem9uZS1qcy90ZXN0aW5nLmphc21pbmVcIjtcclxuaW1wb3J0IHtcclxuICBuc1Rlc3RCZWRJbml0LFxyXG4gIG5zVGVzdEJlZEJlZm9yZUVhY2gsXHJcbiAgbnNUZXN0QmVkQWZ0ZXJFYWNoLFxyXG4gIG5zVGVzdEJlZFJlbmRlclxyXG59IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci90ZXN0aW5nXCI7XHJcblxyXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gXCJAYW5ndWxhci9jb3JlL3Rlc3RpbmdcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQnRjU2VydmljZSB9IGZyb20gXCJ+L3NlcnZpY2VzL2J0Yy5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEFkZHJlc3Nlc0NvbXBvbmVudCB9IGZyb20gXCJ+L2hvbWUvYWRkcmVzc2VzLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBGYWtlQnRjU2VydmljZSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5uc1Rlc3RCZWRJbml0KCk7XHJcblxyXG5kZXNjcmliZShcIkFkZHJlc3Nlc0NvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaChcclxuICAgIG5zVGVzdEJlZEJlZm9yZUVhY2goXHJcbiAgICAgIFtBZGRyZXNzZXNDb21wb25lbnRdLFxyXG4gICAgICBbeyBwcm92aWRlOiBCdGNTZXJ2aWNlLCB1c2VWYWx1ZTogbmV3IEZha2VCdGNTZXJ2aWNlKCkgfV1cclxuICAgIClcclxuICApO1xyXG5cclxuICBhZnRlckVhY2gobnNUZXN0QmVkQWZ0ZXJFYWNoKGZhbHNlKSk7XHJcblxyXG4gIGl0KFwiQ29tcG9uZW50IHNob3VsZCBleGlzdFwiLCBhc3luYygoKSA9PiB7XHJcbiAgICByZXR1cm4gbnNUZXN0QmVkUmVuZGVyKEFkZHJlc3Nlc0NvbXBvbmVudCkudGhlbihmaXh0dXJlID0+IHtcclxuICAgICAgY29uc3QgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8QWRkcmVzc2VzQ29tcG9uZW50PiA9XHJcbiAgICAgICAgZml4dHVyZS5jb21wb25lbnRSZWY7XHJcbiAgICAgIGV4cGVjdChjb21wb25lbnRSZWYpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICB9KSk7XHJcblxyXG4gIGl0KFwicHJvcGVydGllcyBzaG91bGQgYmUgZGVmaW5lZCBhdCBjb21wb25lbnQgc3RhcnRcIiwgYXN5bmMoKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5zVGVzdEJlZFJlbmRlcihBZGRyZXNzZXNDb21wb25lbnQpLnRoZW4oZml4dHVyZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEFkZHJlc3Nlc0NvbXBvbmVudD4gPVxyXG4gICAgICAgIGZpeHR1cmUuY29tcG9uZW50UmVmO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmLmluc3RhbmNlLmFkZHJlc3NlcyQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChjb21wb25lbnRSZWYuaW5zdGFuY2UudG90YWxBbW91bnQkKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MpLnRvRXF1YWwoXCJcIik7XHJcbiAgICB9KTtcclxuICB9KSk7XHJcblxyXG4gIGl0KFwiQnRjU2VydmljZS5nZXRBZGRyZXNzIGFuZCBnZXRUb3RhbEFtb3VudCBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHdoZW4gbmdPbkluaXQoKSBpcyBjYWxsZWRcIiwgKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5zVGVzdEJlZFJlbmRlcihBZGRyZXNzZXNDb21wb25lbnQpLnRoZW4oZml4dHVyZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEFkZHJlc3Nlc0NvbXBvbmVudD4gPVxyXG4gICAgICAgIGZpeHR1cmUuY29tcG9uZW50UmVmO1xyXG4gICAgICBjb25zdCBzZXJ2aWNlOiBCdGNTZXJ2aWNlID0gY29tcG9uZW50UmVmLmluc3RhbmNlLmJ0YztcclxuICAgICAgc3B5T24oc2VydmljZSwgXCJnZXRBZGRyZXNzZXNcIik7XHJcbiAgICAgIHNweU9uKHNlcnZpY2UsIFwiZ2V0VG90YWxBbW91bnRcIik7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5uZ09uSW5pdCgpO1xyXG4gICAgICBleHBlY3Qoc2VydmljZS5nZXRBZGRyZXNzZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0VG90YWxBbW91bnQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJwcm9wZXJ0eSBuZXdBZGRyZXNzIHNob3VsZCBiZSBlbXB0eSBhZnRlciBvbkFkZCgpIGNhbGxcIiwgYXN5bmMoKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5zVGVzdEJlZFJlbmRlcihBZGRyZXNzZXNDb21wb25lbnQpLnRoZW4oZml4dHVyZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEFkZHJlc3Nlc0NvbXBvbmVudD4gPVxyXG4gICAgICAgIGZpeHR1cmUuY29tcG9uZW50UmVmO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UubmV3QWRkcmVzcyA9IFwidGVzdFwiO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub25BZGQoKTtcclxuICAgICAgZXhwZWN0KGNvbXBvbmVudFJlZi5pbnN0YW5jZS5uZXdBZGRyZXNzKS50b0VxdWFsKFwiXCIpO1xyXG5cclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MgPSBcIlwiO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub25BZGQoKTtcclxuXHJcbiAgICAgIGV4cGVjdChjb21wb25lbnRSZWYuaW5zdGFuY2UubmV3QWRkcmVzcykudG9FcXVhbChcIlwiKTtcclxuICAgIH0pO1xyXG4gIH0pKTtcclxuXHJcbiAgaXQoXCJCdGNTZXJ2aWNlLmFkZEFkZHJlc3MoKSBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHdoZW4gb25BZGQoKSBhbmQgbmV3QWRkcmVzcyBpcyBub3QgZW1wdHlcIiwgKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5zVGVzdEJlZFJlbmRlcihBZGRyZXNzZXNDb21wb25lbnQpLnRoZW4oZml4dHVyZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEFkZHJlc3Nlc0NvbXBvbmVudD4gPVxyXG4gICAgICAgIGZpeHR1cmUuY29tcG9uZW50UmVmO1xyXG4gICAgICBjb25zdCBzZXJ2aWNlOiBCdGNTZXJ2aWNlID0gY29tcG9uZW50UmVmLmluc3RhbmNlLmJ0YztcclxuICAgICAgc3B5T24oc2VydmljZSwgXCJhZGRBZGRyZXNzXCIpO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UubmV3QWRkcmVzcyA9IFwidGVzdFwiO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub25BZGQoKTtcclxuICAgICAgZXhwZWN0KHNlcnZpY2UuYWRkQWRkcmVzcykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UubmV3QWRkcmVzcyA9IFwiXCI7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5vbkFkZCgpO1xyXG4gICAgICBleHBlY3Qoc2VydmljZS5hZGRBZGRyZXNzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJCdGNTZXJ2aWNlLnJlbW92ZUFkZHJlc3MoKSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gb25EZWwoKSB3YXMgY2FsbGVkXCIsICgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWRkcmVzc2VzQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBZGRyZXNzZXNDb21wb25lbnQ+ID1cclxuICAgICAgICBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgY29uc3Qgc2VydmljZTogQnRjU2VydmljZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZS5idGM7XHJcbiAgICAgIHNweU9uKHNlcnZpY2UsIFwicmVtb3ZlQWRkcmVzc1wiKTtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9uRGVsKG51bGwpO1xyXG4gICAgICBleHBlY3Qoc2VydmljZS5yZW1vdmVBZGRyZXNzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJnZXRTaG9ydEFkZHJlc3Mgc2hvdWxkIHJldHVybiBzaG9ydCBhZGRyZXNzXCIsIGFzeW5jKCgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWRkcmVzc2VzQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBZGRyZXNzZXNDb21wb25lbnQ+ID1cclxuICAgICAgICBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MgPVxyXG4gICAgICAgIFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIjtcclxuICAgICAgbGV0IHNob3J0QWRkcmVzcyA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZS5nZXRTaG9ydEFkZHJlc3MoXHJcbiAgICAgICAgXCIxMjM0NTY3ODkwLTEwLTEyMzQ1Njc4OTAtMjAtMTIzNDU2Nzg5MC0zMC0xMjM0NTY3ODkwLTQwLTEyMzQ1Njc4OTAtNTBcIlxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3Qoc2hvcnRBZGRyZXNzKS50b0NvbnRhaW4oXCIuLi5cIik7XHJcblxyXG4gICAgICBzaG9ydEFkZHJlc3MgPSBjb21wb25lbnRSZWYuaW5zdGFuY2UuZ2V0U2hvcnRBZGRyZXNzKFwiXCIpO1xyXG4gICAgICBleHBlY3Qoc2hvcnRBZGRyZXNzKS50b0NvbnRhaW4oXCIuLi5cIik7XHJcbiAgICB9KTtcclxuICB9KSk7XHJcbn0pO1xyXG4iXX0=