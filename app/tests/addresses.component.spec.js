"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("nativescript-angular/zone-js/testing.jasmine");
var testing_1 = require("nativescript-angular/testing");
var testing_2 = require("@angular/core/testing");
var btc_service_1 = require("~/services/btc.service");
var addresses_component_1 = require("~/home/addresses.component");
var rxjs_1 = require("rxjs");
testing_1.nsTestBedInit();
var FakeBtcService = /** @class */ (function () {
    function FakeBtcService() {
    }
    FakeBtcService.prototype.addAddress = function (a) { };
    FakeBtcService.prototype.getTotalAmount = function () {
        return rxjs_1.of();
    };
    FakeBtcService.prototype.getAddresses = function () {
        return rxjs_1.of();
    };
    return FakeBtcService;
}());
exports.FakeBtcService = FakeBtcService;
describe("AddressesComponent", function () {
    beforeEach(testing_1.nsTestBedBeforeEach([addresses_component_1.AddressesComponent], [{ provide: btc_service_1.BtcService, useValue: new FakeBtcService() }]));
    afterEach(testing_1.nsTestBedAfterEach(false));
    it("Component should exist", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef).toBeDefined();
        });
    }));
    it("property newAddress should be empty at component start", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("property newAddress should be empty after onAdd() call", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress = "test";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
            componentRef.instance.newAddress = "";
            componentRef.instance.onAdd();
            expect(componentRef.instance.newAddress).toEqual("");
        });
    }));
    it("getShortAddress should return short address", testing_2.async(function () {
        return testing_1.nsTestBedRender(addresses_component_1.AddressesComponent).then(function (fixture) {
            var componentRef = fixture.componentRef;
            componentRef.instance.newAddress =
                "12345678901234567890123456789012345678901234567890";
            var shortAddress = componentRef.instance.getShortAddress("1234567890-10-1234567890-20-1234567890-30-1234567890-40-1234567890-50");
            expect(shortAddress).toContain("...");
            shortAddress = componentRef.instance.getShortAddress("");
            expect(shortAddress).toContain("...");
        });
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2VzLmNvbXBvbmVudC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkcmVzc2VzLmNvbXBvbmVudC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0RBQXNEO0FBQ3RELHdEQUtzQztBQUV0QyxpREFBOEM7QUFFOUMsc0RBQWdFO0FBQ2hFLGtFQUFnRTtBQUVoRSw2QkFBc0M7QUFFdEMsdUJBQWEsRUFBRSxDQUFDO0FBRWhCO0lBQUE7SUFTQSxDQUFDO0lBUkMsbUNBQVUsR0FBVixVQUFXLENBQVMsSUFBUyxDQUFDO0lBQzlCLHVDQUFjLEdBQWQ7UUFDRSxPQUFPLFNBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxPQUFPLFNBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQVRELElBU0M7QUFUWSx3Q0FBYztBQVczQixRQUFRLENBQUMsb0JBQW9CLEVBQUU7SUFDN0IsVUFBVSxDQUNSLDZCQUFtQixDQUNqQixDQUFDLHdDQUFrQixDQUFDLEVBQ3BCLENBQUMsRUFBRSxPQUFPLEVBQUUsd0JBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQzFELENBQ0YsQ0FBQztJQUNGLFNBQVMsQ0FBQyw0QkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXJDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxlQUFLLENBQUM7UUFDakMsT0FBTyx5QkFBZSxDQUFDLHdDQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUNyRCxJQUFNLFlBQVksR0FDaEIsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUN2QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBR0osRUFBRSxDQUFDLHdEQUF3RCxFQUFFLGVBQUssQ0FBQztRQUNqRSxPQUFPLHlCQUFlLENBQUMsd0NBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ3JELElBQU0sWUFBWSxHQUNoQixPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFSixFQUFFLENBQUMsd0RBQXdELEVBQUUsZUFBSyxDQUFDO1FBQ2pFLE9BQU8seUJBQWUsQ0FBQyx3Q0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDckQsSUFBTSxZQUFZLEdBQ2hCLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDdkIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO1lBQzFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXJELFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUN0QyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFJSixFQUFFLENBQUMsNkNBQTZDLEVBQUUsZUFBSyxDQUFDO1FBQ3RELE9BQU8seUJBQWUsQ0FBQyx3Q0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDckQsSUFBTSxZQUFZLEdBQ2hCLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDdkIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVO2dCQUM5QixvREFBb0QsQ0FBQztZQUN2RCxJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FDdEQsdUVBQXVFLENBQ3hFLENBQUM7WUFDRixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXRDLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FDbEQsRUFBRSxDQUNILENBQUM7WUFDRixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvem9uZS1qcy90ZXN0aW5nLmphc21pbmVcIjtcclxuaW1wb3J0IHtcclxuICBuc1Rlc3RCZWRJbml0LFxyXG4gIG5zVGVzdEJlZEJlZm9yZUVhY2gsXHJcbiAgbnNUZXN0QmVkQWZ0ZXJFYWNoLFxyXG4gIG5zVGVzdEJlZFJlbmRlclxyXG59IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci90ZXN0aW5nXCI7XHJcblxyXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gXCJAYW5ndWxhci9jb3JlL3Rlc3RpbmdcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQnRjU2VydmljZSwgQnRjQWRkcmVzcyB9IGZyb20gXCJ+L3NlcnZpY2VzL2J0Yy5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEFkZHJlc3Nlc0NvbXBvbmVudCB9IGZyb20gXCJ+L2hvbWUvYWRkcmVzc2VzLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGFuZGxlciB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5uc1Rlc3RCZWRJbml0KCk7XHJcblxyXG5leHBvcnQgY2xhc3MgRmFrZUJ0Y1NlcnZpY2Uge1xyXG4gIGFkZEFkZHJlc3MoYTogc3RyaW5nKTogdm9pZCB7fVxyXG4gIGdldFRvdGFsQW1vdW50KCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gb2YoKTtcclxuICB9XHJcblxyXG4gIGdldEFkZHJlc3NlcygpOiBPYnNlcnZhYmxlPEJ0Y0FkZHJlc3NbXT4ge1xyXG4gICAgcmV0dXJuIG9mKCk7XHJcbiAgfVxyXG59XHJcblxyXG5kZXNjcmliZShcIkFkZHJlc3Nlc0NvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaChcclxuICAgIG5zVGVzdEJlZEJlZm9yZUVhY2goXHJcbiAgICAgIFtBZGRyZXNzZXNDb21wb25lbnRdLFxyXG4gICAgICBbeyBwcm92aWRlOiBCdGNTZXJ2aWNlLCB1c2VWYWx1ZTogbmV3IEZha2VCdGNTZXJ2aWNlKCkgfV1cclxuICAgIClcclxuICApO1xyXG4gIGFmdGVyRWFjaChuc1Rlc3RCZWRBZnRlckVhY2goZmFsc2UpKTtcclxuXHJcbiAgaXQoXCJDb21wb25lbnQgc2hvdWxkIGV4aXN0XCIsIGFzeW5jKCgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWRkcmVzc2VzQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBZGRyZXNzZXNDb21wb25lbnQ+ID1cclxuICAgICAgICBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgZXhwZWN0KGNvbXBvbmVudFJlZikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pKTtcclxuXHJcblxyXG4gIGl0KFwicHJvcGVydHkgbmV3QWRkcmVzcyBzaG91bGQgYmUgZW1wdHkgYXQgY29tcG9uZW50IHN0YXJ0XCIsIGFzeW5jKCgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWRkcmVzc2VzQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBZGRyZXNzZXNDb21wb25lbnQ+ID1cclxuICAgICAgICBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgZXhwZWN0KGNvbXBvbmVudFJlZi5pbnN0YW5jZS5uZXdBZGRyZXNzKS50b0VxdWFsKFwiXCIpO1xyXG4gICAgfSk7XHJcbiAgfSkpO1xyXG5cclxuICBpdChcInByb3BlcnR5IG5ld0FkZHJlc3Mgc2hvdWxkIGJlIGVtcHR5IGFmdGVyIG9uQWRkKCkgY2FsbFwiLCBhc3luYygoKSA9PiB7XHJcbiAgICByZXR1cm4gbnNUZXN0QmVkUmVuZGVyKEFkZHJlc3Nlc0NvbXBvbmVudCkudGhlbihmaXh0dXJlID0+IHtcclxuICAgICAgY29uc3QgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8QWRkcmVzc2VzQ29tcG9uZW50PiA9XHJcbiAgICAgICAgZml4dHVyZS5jb21wb25lbnRSZWY7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5uZXdBZGRyZXNzID0gXCJ0ZXN0XCI7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5vbkFkZCgpO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MpLnRvRXF1YWwoXCJcIik7XHJcblxyXG4gICAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UubmV3QWRkcmVzcyA9IFwiXCI7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5vbkFkZCgpO1xyXG4gICAgICBleHBlY3QoY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MpLnRvRXF1YWwoXCJcIik7XHJcbiAgICB9KTtcclxuICB9KSk7XHJcblxyXG5cclxuXHJcbiAgaXQoXCJnZXRTaG9ydEFkZHJlc3Mgc2hvdWxkIHJldHVybiBzaG9ydCBhZGRyZXNzXCIsIGFzeW5jKCgpID0+IHtcclxuICAgIHJldHVybiBuc1Rlc3RCZWRSZW5kZXIoQWRkcmVzc2VzQ29tcG9uZW50KS50aGVuKGZpeHR1cmUgPT4ge1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxBZGRyZXNzZXNDb21wb25lbnQ+ID1cclxuICAgICAgICBmaXh0dXJlLmNvbXBvbmVudFJlZjtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm5ld0FkZHJlc3MgPVxyXG4gICAgICAgIFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIjtcclxuICAgICAgbGV0IHNob3J0QWRkcmVzcyA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZS5nZXRTaG9ydEFkZHJlc3MoXHJcbiAgICAgICAgXCIxMjM0NTY3ODkwLTEwLTEyMzQ1Njc4OTAtMjAtMTIzNDU2Nzg5MC0zMC0xMjM0NTY3ODkwLTQwLTEyMzQ1Njc4OTAtNTBcIlxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3Qoc2hvcnRBZGRyZXNzKS50b0NvbnRhaW4oXCIuLi5cIik7XHJcblxyXG4gICAgICBzaG9ydEFkZHJlc3MgPSBjb21wb25lbnRSZWYuaW5zdGFuY2UuZ2V0U2hvcnRBZGRyZXNzKFxyXG4gICAgICAgIFwiXCJcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNob3J0QWRkcmVzcykudG9Db250YWluKFwiLi4uXCIpO1xyXG4gICAgfSk7XHJcbiAgfSkpO1xyXG59KTtcclxuIl19